# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    OpenAPI spec version: 2.2.0
    Contact: developers@flat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ClassApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def activate_class(self, _class, **kwargs):
        """
        Activate the class
        Mark the class as `active`. This is mainly used for classes synchronized from Clever that are initially with an `inactive` state and hidden in the UI. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.activate_class(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.activate_class_with_http_info(_class, **kwargs)
        else:
            (data) = self.activate_class_with_http_info(_class, **kwargs)
            return data

    def activate_class_with_http_info(self, _class, **kwargs):
        """
        Activate the class
        Mark the class as `active`. This is mainly used for classes synchronized from Clever that are initially with an `inactive` state and hidden in the UI. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.activate_class_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `activate_class`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/activate', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_class_user(self, _class, user, **kwargs):
        """
        Add a user to the class
        This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_class_user(_class, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str user: Unique identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_class_user_with_http_info(_class, user, **kwargs)
        else:
            (data) = self.add_class_user_with_http_info(_class, user, **kwargs)
            return data

    def add_class_user_with_http_info(self, _class, user, **kwargs):
        """
        Add a user to the class
        This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_class_user_with_http_info(_class, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str user: Unique identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_class_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `add_class_user`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `add_class_user`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/users/{user}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def archive_class(self, _class, **kwargs):
        """
        Archive the class
        Mark the class as `archived`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.archive_class(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.archive_class_with_http_info(_class, **kwargs)
        else:
            (data) = self.archive_class_with_http_info(_class, **kwargs)
            return data

    def archive_class_with_http_info(self, _class, **kwargs):
        """
        Archive the class
        Mark the class as `archived`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.archive_class_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `archive_class`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/archive', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def copy_assignment(self, _class, assignment, body, **kwargs):
        """
        Copy an assignment
        Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.copy_assignment(_class, assignment, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param AssignmentCopy body: (required)
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.copy_assignment_with_http_info(_class, assignment, body, **kwargs)
        else:
            (data) = self.copy_assignment_with_http_info(_class, assignment, body, **kwargs)
            return data

    def copy_assignment_with_http_info(self, _class, assignment, body, **kwargs):
        """
        Copy an assignment
        Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.copy_assignment_with_http_info(_class, assignment, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param AssignmentCopy body: (required)
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'assignment', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `copy_assignment`")
        # verify the required parameter 'assignment' is set
        if ('assignment' not in params) or (params['assignment'] is None):
            raise ValueError("Missing the required parameter `assignment` when calling `copy_assignment`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_assignment`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'assignment' in params:
            path_params['assignment'] = params['assignment']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/assignments/{assignment}/copy', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Assignment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_assignment(self, _class, **kwargs):
        """
        Assignment creation
        Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_assignment(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param AssignmentCreation body:
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_assignment_with_http_info(_class, **kwargs)
        else:
            (data) = self.create_assignment_with_http_info(_class, **kwargs)
            return data

    def create_assignment_with_http_info(self, _class, **kwargs):
        """
        Assignment creation
        Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_assignment_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param AssignmentCreation body:
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `create_assignment`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/assignments', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Assignment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_class(self, body, **kwargs):
        """
        Create a new class
        Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using `POST /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_class(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ClassCreation body: (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_class_with_http_info(body, **kwargs)
        else:
            (data) = self.create_class_with_http_info(body, **kwargs)
            return data

    def create_class_with_http_info(self, body, **kwargs):
        """
        Create a new class
        Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using `POST /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_class_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ClassCreation body: (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_class`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_submission(self, _class, assignment, body, **kwargs):
        """
        Create or edit a submission
        Use this method as a student to create, update and submit a submission related to an assignment. Students can only set `attachments`, `studentComment` and `submit`.  Teachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_submission(_class, assignment, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param AssignmentSubmissionUpdate body: (required)
        :return: AssignmentSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_submission_with_http_info(_class, assignment, body, **kwargs)
        else:
            (data) = self.create_submission_with_http_info(_class, assignment, body, **kwargs)
            return data

    def create_submission_with_http_info(self, _class, assignment, body, **kwargs):
        """
        Create or edit a submission
        Use this method as a student to create, update and submit a submission related to an assignment. Students can only set `attachments`, `studentComment` and `submit`.  Teachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_submission_with_http_info(_class, assignment, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param AssignmentSubmissionUpdate body: (required)
        :return: AssignmentSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'assignment', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `create_submission`")
        # verify the required parameter 'assignment' is set
        if ('assignment' not in params) or (params['assignment'] is None):
            raise ValueError("Missing the required parameter `assignment` when calling `create_submission`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_submission`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'assignment' in params:
            path_params['assignment'] = params['assignment']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/assignments/{assignment}/submissions', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AssignmentSubmission',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_class_user(self, _class, user, **kwargs):
        """
        Remove a user from the class
        This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_class_user(_class, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str user: Unique identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_class_user_with_http_info(_class, user, **kwargs)
        else:
            (data) = self.delete_class_user_with_http_info(_class, user, **kwargs)
            return data

    def delete_class_user_with_http_info(self, _class, user, **kwargs):
        """
        Remove a user from the class
        This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_class_user_with_http_info(_class, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str user: Unique identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_class_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `delete_class_user`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `delete_class_user`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/users/{user}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edit_submission(self, _class, assignment, submission, body, **kwargs):
        """
        Edit a submission
        Use this method as a teacher to update the different submission and give feedback. Teachers can only set `returnFeedback` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_submission(_class, assignment, submission, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param str submission: Unique identifier of the submission (required)
        :param AssignmentSubmissionUpdate body: (required)
        :return: AssignmentSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_submission_with_http_info(_class, assignment, submission, body, **kwargs)
        else:
            (data) = self.edit_submission_with_http_info(_class, assignment, submission, body, **kwargs)
            return data

    def edit_submission_with_http_info(self, _class, assignment, submission, body, **kwargs):
        """
        Edit a submission
        Use this method as a teacher to update the different submission and give feedback. Teachers can only set `returnFeedback` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_submission_with_http_info(_class, assignment, submission, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param str submission: Unique identifier of the submission (required)
        :param AssignmentSubmissionUpdate body: (required)
        :return: AssignmentSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'assignment', 'submission', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `edit_submission`")
        # verify the required parameter 'assignment' is set
        if ('assignment' not in params) or (params['assignment'] is None):
            raise ValueError("Missing the required parameter `assignment` when calling `edit_submission`")
        # verify the required parameter 'submission' is set
        if ('submission' not in params) or (params['submission'] is None):
            raise ValueError("Missing the required parameter `submission` when calling `edit_submission`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_submission`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'assignment' in params:
            path_params['assignment'] = params['assignment']
        if 'submission' in params:
            path_params['submission'] = params['submission']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/assignments/{assignment}/submissions/{submission}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AssignmentSubmission',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enroll_class(self, enrollment_code, **kwargs):
        """
        Join a class
        Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the `ClassDetails` returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enroll_class(enrollment_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrollment_code: The enrollment code, available to the teacher in `ClassDetails`  (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enroll_class_with_http_info(enrollment_code, **kwargs)
        else:
            (data) = self.enroll_class_with_http_info(enrollment_code, **kwargs)
            return data

    def enroll_class_with_http_info(self, enrollment_code, **kwargs):
        """
        Join a class
        Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the `ClassDetails` returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enroll_class_with_http_info(enrollment_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrollment_code: The enrollment code, available to the teacher in `ClassDetails`  (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrollment_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enroll_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrollment_code' is set
        if ('enrollment_code' not in params) or (params['enrollment_code'] is None):
            raise ValueError("Missing the required parameter `enrollment_code` when calling `enroll_class`")


        collection_formats = {}

        path_params = {}
        if 'enrollment_code' in params:
            path_params['enrollmentCode'] = params['enrollment_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/enroll/{enrollmentCode}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_class(self, _class, **kwargs):
        """
        Get the details of a single class
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_class(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_class_with_http_info(_class, **kwargs)
        else:
            (data) = self.get_class_with_http_info(_class, **kwargs)
            return data

    def get_class_with_http_info(self, _class, **kwargs):
        """
        Get the details of a single class
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_class_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `get_class`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_score_submissions(self, score, **kwargs):
        """
        List submissions related to the score
        This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_score_submissions(score, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str score: Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`).  (required)
        :return: list[AssignmentSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_score_submissions_with_http_info(score, **kwargs)
        else:
            (data) = self.get_score_submissions_with_http_info(score, **kwargs)
            return data

    def get_score_submissions_with_http_info(self, score, **kwargs):
        """
        List submissions related to the score
        This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_score_submissions_with_http_info(score, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str score: Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`).  (required)
        :return: list[AssignmentSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['score']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_score_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'score' is set
        if ('score' not in params) or (params['score'] is None):
            raise ValueError("Missing the required parameter `score` when calling `get_score_submissions`")


        collection_formats = {}

        path_params = {}
        if 'score' in params:
            path_params['score'] = params['score']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/scores/{score}/submissions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssignmentSubmission]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_submission(self, _class, assignment, submission, **kwargs):
        """
        Get a student submission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_submission(_class, assignment, submission, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param str submission: Unique identifier of the submission (required)
        :return: AssignmentSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_submission_with_http_info(_class, assignment, submission, **kwargs)
        else:
            (data) = self.get_submission_with_http_info(_class, assignment, submission, **kwargs)
            return data

    def get_submission_with_http_info(self, _class, assignment, submission, **kwargs):
        """
        Get a student submission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_submission_with_http_info(_class, assignment, submission, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :param str submission: Unique identifier of the submission (required)
        :return: AssignmentSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'assignment', 'submission']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `get_submission`")
        # verify the required parameter 'assignment' is set
        if ('assignment' not in params) or (params['assignment'] is None):
            raise ValueError("Missing the required parameter `assignment` when calling `get_submission`")
        # verify the required parameter 'submission' is set
        if ('submission' not in params) or (params['submission'] is None):
            raise ValueError("Missing the required parameter `submission` when calling `get_submission`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'assignment' in params:
            path_params['assignment'] = params['assignment']
        if 'submission' in params:
            path_params['submission'] = params['submission']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/assignments/{assignment}/submissions/{submission}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AssignmentSubmission',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_submissions(self, _class, assignment, **kwargs):
        """
        List the students' submissions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_submissions(_class, assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :return: list[AssignmentSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_submissions_with_http_info(_class, assignment, **kwargs)
        else:
            (data) = self.get_submissions_with_http_info(_class, assignment, **kwargs)
            return data

    def get_submissions_with_http_info(self, _class, assignment, **kwargs):
        """
        List the students' submissions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_submissions_with_http_info(_class, assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str assignment: Unique identifier of the assignment (required)
        :return: list[AssignmentSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'assignment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `get_submissions`")
        # verify the required parameter 'assignment' is set
        if ('assignment' not in params) or (params['assignment'] is None):
            raise ValueError("Missing the required parameter `assignment` when calling `get_submissions`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'assignment' in params:
            path_params['assignment'] = params['assignment']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/assignments/{assignment}/submissions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssignmentSubmission]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_assignments(self, _class, **kwargs):
        """
        Assignments listing
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_assignments(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_assignments_with_http_info(_class, **kwargs)
        else:
            (data) = self.list_assignments_with_http_info(_class, **kwargs)
            return data

    def list_assignments_with_http_info(self, _class, **kwargs):
        """
        Assignments listing
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_assignments_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `list_assignments`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/assignments', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Assignment]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_class_student_submissions(self, _class, user, **kwargs):
        """
        List the submissions for a student
        Use this method as a teacher to list all the assignment submissions sent by a student of the class 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_class_student_submissions(_class, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str user: Unique identifier of the user (required)
        :return: list[AssignmentSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_class_student_submissions_with_http_info(_class, user, **kwargs)
        else:
            (data) = self.list_class_student_submissions_with_http_info(_class, user, **kwargs)
            return data

    def list_class_student_submissions_with_http_info(self, _class, user, **kwargs):
        """
        List the submissions for a student
        Use this method as a teacher to list all the assignment submissions sent by a student of the class 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_class_student_submissions_with_http_info(_class, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param str user: Unique identifier of the user (required)
        :return: list[AssignmentSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_class_student_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `list_class_student_submissions`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `list_class_student_submissions`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/students/{user}/submissions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AssignmentSubmission]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_classes(self, **kwargs):
        """
        List the classes available for the current user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_classes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: Filter the classes by state
        :return: list[ClassDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_classes_with_http_info(**kwargs)
        else:
            (data) = self.list_classes_with_http_info(**kwargs)
            return data

    def list_classes_with_http_info(self, **kwargs):
        """
        List the classes available for the current user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_classes_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: Filter the classes by state
        :return: list[ClassDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_classes" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ClassDetails]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unarchive_class(self, _class, **kwargs):
        """
        Unarchive the class
        Mark the class as `active`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unarchive_class(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unarchive_class_with_http_info(_class, **kwargs)
        else:
            (data) = self.unarchive_class_with_http_info(_class, **kwargs)
            return data

    def unarchive_class_with_http_info(self, _class, **kwargs):
        """
        Unarchive the class
        Mark the class as `active`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unarchive_class_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unarchive_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `unarchive_class`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}/archive', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_class(self, _class, **kwargs):
        """
        Update the class
        Update the meta information of the class 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_class(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param ClassUpdate body: Details of the Class
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_class_with_http_info(_class, **kwargs)
        else:
            (data) = self.update_class_with_http_info(_class, **kwargs)
            return data

    def update_class_with_http_info(self, _class, **kwargs):
        """
        Update the class
        Update the meta information of the class 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_class_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Unique identifier of the class (required)
        :param ClassUpdate body: Details of the Class
        :return: ClassDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `update_class`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/classes/{class}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassDetails',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

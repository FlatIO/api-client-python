# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    OpenAPI spec version: 2.6.0
    Contact: developers@flat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flat_api.models.class_roles import ClassRoles  # noqa: F401,E501
from flat_api.models.organization_roles import OrganizationRoles  # noqa: F401,E501
from flat_api.models.user_basics import UserBasics  # noqa: F401,E501


class UserPublicSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization': 'str',
        'organization_role': 'OrganizationRoles',
        'class_role': 'ClassRoles',
        'html_url': 'str'
    }

    attribute_map = {
        'organization': 'organization',
        'organization_role': 'organizationRole',
        'class_role': 'classRole',
        'html_url': 'htmlUrl'
    }

    def __init__(self, organization=None, organization_role=None, class_role=None, html_url=None):  # noqa: E501
        """UserPublicSummary - a model defined in Swagger"""  # noqa: E501

        self._organization = None
        self._organization_role = None
        self._class_role = None
        self._html_url = None
        self.discriminator = None

        if organization is not None:
            self.organization = organization
        if organization_role is not None:
            self.organization_role = organization_role
        if class_role is not None:
            self.class_role = class_role
        if html_url is not None:
            self.html_url = html_url

    @property
    def organization(self):
        """Gets the organization of this UserPublicSummary.  # noqa: E501

        Organization ID (for Edu users only)  # noqa: E501

        :return: The organization of this UserPublicSummary.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserPublicSummary.

        Organization ID (for Edu users only)  # noqa: E501

        :param organization: The organization of this UserPublicSummary.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def organization_role(self):
        """Gets the organization_role of this UserPublicSummary.  # noqa: E501


        :return: The organization_role of this UserPublicSummary.  # noqa: E501
        :rtype: OrganizationRoles
        """
        return self._organization_role

    @organization_role.setter
    def organization_role(self, organization_role):
        """Sets the organization_role of this UserPublicSummary.


        :param organization_role: The organization_role of this UserPublicSummary.  # noqa: E501
        :type: OrganizationRoles
        """

        self._organization_role = organization_role

    @property
    def class_role(self):
        """Gets the class_role of this UserPublicSummary.  # noqa: E501


        :return: The class_role of this UserPublicSummary.  # noqa: E501
        :rtype: ClassRoles
        """
        return self._class_role

    @class_role.setter
    def class_role(self, class_role):
        """Sets the class_role of this UserPublicSummary.


        :param class_role: The class_role of this UserPublicSummary.  # noqa: E501
        :type: ClassRoles
        """

        self._class_role = class_role

    @property
    def html_url(self):
        """Gets the html_url of this UserPublicSummary.  # noqa: E501

        Link to user profile (for Indiv. users only)  # noqa: E501

        :return: The html_url of this UserPublicSummary.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this UserPublicSummary.

        Link to user profile (for Indiv. users only)  # noqa: E501

        :param html_url: The html_url of this UserPublicSummary.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPublicSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

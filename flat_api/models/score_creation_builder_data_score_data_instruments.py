# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    OpenAPI spec version: 2.17.0
    Contact: developers@flat.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ScoreCreationBuilderDataScoreDataInstruments(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group': 'str',
        'instrument': 'str',
        'long_name': 'str',
        'short_name': 'str'
    }

    attribute_map = {
        'group': 'group',
        'instrument': 'instrument',
        'long_name': 'longName',
        'short_name': 'shortName'
    }

    def __init__(self, group=None, instrument=None, long_name=None, short_name=None):  # noqa: E501
        """ScoreCreationBuilderDataScoreDataInstruments - a model defined in OpenAPI"""  # noqa: E501

        self._group = None
        self._instrument = None
        self._long_name = None
        self._short_name = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if instrument is not None:
            self.instrument = instrument
        if long_name is not None:
            self.long_name = long_name
        if short_name is not None:
            self.short_name = short_name

    @property
    def group(self):
        """Gets the group of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501

        The  of the instrument group (e.g. `keyboards`, `brass`)  # noqa: E501

        :return: The group of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ScoreCreationBuilderDataScoreDataInstruments.

        The  of the instrument group (e.g. `keyboards`, `brass`)  # noqa: E501

        :param group: The group of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def instrument(self):
        """Gets the instrument of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501

        The identifier of the instrument (e.g. `piano`, `trumpet`)  # noqa: E501

        :return: The instrument of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this ScoreCreationBuilderDataScoreDataInstruments.

        The identifier of the instrument (e.g. `piano`, `trumpet`)  # noqa: E501

        :param instrument: The instrument of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def long_name(self):
        """Gets the long_name of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501

        The full name of the instrument  # noqa: E501

        :return: The long_name of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this ScoreCreationBuilderDataScoreDataInstruments.

        The full name of the instrument  # noqa: E501

        :param long_name: The long_name of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def short_name(self):
        """Gets the short_name of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501

        The abbreviation of the name of the instrument  # noqa: E501

        :return: The short_name of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ScoreCreationBuilderDataScoreDataInstruments.

        The abbreviation of the name of the instrument  # noqa: E501

        :param short_name: The short_name of this ScoreCreationBuilderDataScoreDataInstruments.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoreCreationBuilderDataScoreDataInstruments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

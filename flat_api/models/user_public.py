# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    OpenAPI spec version: 2.6.0
    Contact: developers@flat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flat_api.models.class_roles import ClassRoles  # noqa: F401,E501
from flat_api.models.organization_roles import OrganizationRoles  # noqa: F401,E501
from flat_api.models.user_instruments import UserInstruments  # noqa: F401,E501
from flat_api.models.user_public_summary import UserPublicSummary  # noqa: F401,E501


class UserPublic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bio': 'str',
        'registration_date': 'datetime',
        'liked_scores_count': 'int',
        'followers_count': 'int',
        'following_count': 'int',
        'owned_public_scores_count': 'int',
        'profile_theme': 'str',
        'instruments': 'UserInstruments'
    }

    attribute_map = {
        'bio': 'bio',
        'registration_date': 'registrationDate',
        'liked_scores_count': 'likedScoresCount',
        'followers_count': 'followersCount',
        'following_count': 'followingCount',
        'owned_public_scores_count': 'ownedPublicScoresCount',
        'profile_theme': 'profileTheme',
        'instruments': 'instruments'
    }

    def __init__(self, bio=None, registration_date=None, liked_scores_count=None, followers_count=None, following_count=None, owned_public_scores_count=None, profile_theme=None, instruments=None):  # noqa: E501
        """UserPublic - a model defined in Swagger"""  # noqa: E501

        self._bio = None
        self._registration_date = None
        self._liked_scores_count = None
        self._followers_count = None
        self._following_count = None
        self._owned_public_scores_count = None
        self._profile_theme = None
        self._instruments = None
        self.discriminator = None

        if bio is not None:
            self.bio = bio
        if registration_date is not None:
            self.registration_date = registration_date
        if liked_scores_count is not None:
            self.liked_scores_count = liked_scores_count
        if followers_count is not None:
            self.followers_count = followers_count
        if following_count is not None:
            self.following_count = following_count
        if owned_public_scores_count is not None:
            self.owned_public_scores_count = owned_public_scores_count
        if profile_theme is not None:
            self.profile_theme = profile_theme
        if instruments is not None:
            self.instruments = instruments

    @property
    def bio(self):
        """Gets the bio of this UserPublic.  # noqa: E501

        User's biography  # noqa: E501

        :return: The bio of this UserPublic.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this UserPublic.

        User's biography  # noqa: E501

        :param bio: The bio of this UserPublic.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def registration_date(self):
        """Gets the registration_date of this UserPublic.  # noqa: E501

        Date the user signed up  # noqa: E501

        :return: The registration_date of this UserPublic.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this UserPublic.

        Date the user signed up  # noqa: E501

        :param registration_date: The registration_date of this UserPublic.  # noqa: E501
        :type: datetime
        """

        self._registration_date = registration_date

    @property
    def liked_scores_count(self):
        """Gets the liked_scores_count of this UserPublic.  # noqa: E501

        Number of the scores liked by the user  # noqa: E501

        :return: The liked_scores_count of this UserPublic.  # noqa: E501
        :rtype: int
        """
        return self._liked_scores_count

    @liked_scores_count.setter
    def liked_scores_count(self, liked_scores_count):
        """Sets the liked_scores_count of this UserPublic.

        Number of the scores liked by the user  # noqa: E501

        :param liked_scores_count: The liked_scores_count of this UserPublic.  # noqa: E501
        :type: int
        """

        self._liked_scores_count = liked_scores_count

    @property
    def followers_count(self):
        """Gets the followers_count of this UserPublic.  # noqa: E501

        Number of followers the user have  # noqa: E501

        :return: The followers_count of this UserPublic.  # noqa: E501
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this UserPublic.

        Number of followers the user have  # noqa: E501

        :param followers_count: The followers_count of this UserPublic.  # noqa: E501
        :type: int
        """

        self._followers_count = followers_count

    @property
    def following_count(self):
        """Gets the following_count of this UserPublic.  # noqa: E501

        Number of people the user follow  # noqa: E501

        :return: The following_count of this UserPublic.  # noqa: E501
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """Sets the following_count of this UserPublic.

        Number of people the user follow  # noqa: E501

        :param following_count: The following_count of this UserPublic.  # noqa: E501
        :type: int
        """

        self._following_count = following_count

    @property
    def owned_public_scores_count(self):
        """Gets the owned_public_scores_count of this UserPublic.  # noqa: E501

        Number of public scores the user have  # noqa: E501

        :return: The owned_public_scores_count of this UserPublic.  # noqa: E501
        :rtype: int
        """
        return self._owned_public_scores_count

    @owned_public_scores_count.setter
    def owned_public_scores_count(self, owned_public_scores_count):
        """Sets the owned_public_scores_count of this UserPublic.

        Number of public scores the user have  # noqa: E501

        :param owned_public_scores_count: The owned_public_scores_count of this UserPublic.  # noqa: E501
        :type: int
        """

        self._owned_public_scores_count = owned_public_scores_count

    @property
    def profile_theme(self):
        """Gets the profile_theme of this UserPublic.  # noqa: E501

        Theme (background) for the profile  # noqa: E501

        :return: The profile_theme of this UserPublic.  # noqa: E501
        :rtype: str
        """
        return self._profile_theme

    @profile_theme.setter
    def profile_theme(self, profile_theme):
        """Sets the profile_theme of this UserPublic.

        Theme (background) for the profile  # noqa: E501

        :param profile_theme: The profile_theme of this UserPublic.  # noqa: E501
        :type: str
        """

        self._profile_theme = profile_theme

    @property
    def instruments(self):
        """Gets the instruments of this UserPublic.  # noqa: E501


        :return: The instruments of this UserPublic.  # noqa: E501
        :rtype: UserInstruments
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this UserPublic.


        :param instruments: The instruments of this UserPublic.  # noqa: E501
        :type: UserInstruments
        """

        self._instruments = instruments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPublic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    OpenAPI spec version: 2.6.0
    Contact: developers@flat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScoreTrackPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'measure_uuid': 'str',
        'time': 'float'
    }

    attribute_map = {
        'type': 'type',
        'measure_uuid': 'measureUuid',
        'time': 'time'
    }

    def __init__(self, type=None, measure_uuid=None, time=None):  # noqa: E501
        """ScoreTrackPoint - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._measure_uuid = None
        self._time = None
        self.discriminator = None

        self.type = type
        if measure_uuid is not None:
            self.measure_uuid = measure_uuid
        self.time = time

    @property
    def type(self):
        """Gets the type of this ScoreTrackPoint.  # noqa: E501

        The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`  # noqa: E501

        :return: The type of this ScoreTrackPoint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScoreTrackPoint.

        The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`  # noqa: E501

        :param type: The type of this ScoreTrackPoint.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["measure", "end"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def measure_uuid(self):
        """Gets the measure_uuid of this ScoreTrackPoint.  # noqa: E501

        The measure unique identifier  # noqa: E501

        :return: The measure_uuid of this ScoreTrackPoint.  # noqa: E501
        :rtype: str
        """
        return self._measure_uuid

    @measure_uuid.setter
    def measure_uuid(self, measure_uuid):
        """Sets the measure_uuid of this ScoreTrackPoint.

        The measure unique identifier  # noqa: E501

        :param measure_uuid: The measure_uuid of this ScoreTrackPoint.  # noqa: E501
        :type: str
        """

        self._measure_uuid = measure_uuid

    @property
    def time(self):
        """Gets the time of this ScoreTrackPoint.  # noqa: E501

        The corresponding time in seconds  # noqa: E501

        :return: The time of this ScoreTrackPoint.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ScoreTrackPoint.

        The corresponding time in seconds  # noqa: E501

        :param time: The time of this ScoreTrackPoint.  # noqa: E501
        :type: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoreTrackPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

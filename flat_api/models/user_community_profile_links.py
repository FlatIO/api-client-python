# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.20.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserCommunityProfileLinks(BaseModel):
    """
    Social networks links
    """ # noqa: E501
    spotify_url: Optional[StrictStr] = Field(default=None, description="Spotify Profile URL", alias="spotifyUrl")
    youtube_url: Optional[StrictStr] = Field(default=None, description="YouTube channel URL", alias="youtubeUrl")
    soundcloud_url: Optional[StrictStr] = Field(default=None, description="SoundCloud Profile URL", alias="soundcloudUrl")
    tiktok_url: Optional[StrictStr] = Field(default=None, description="TikTok profile URL. For updates, also accepts TikTok usernames", alias="tiktokUrl")
    instagram_url: Optional[StrictStr] = Field(default=None, description="Instagram profile URL. For updates, also accepts Instagram usernames", alias="instagramUrl")
    website_url: Optional[StrictStr] = Field(default=None, description="Personnal website URL", alias="websiteUrl")
    __properties: ClassVar[List[str]] = ["spotifyUrl", "youtubeUrl", "soundcloudUrl", "tiktokUrl", "instagramUrl", "websiteUrl"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserCommunityProfileLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if spotify_url (nullable) is None
        # and model_fields_set contains the field
        if self.spotify_url is None and "spotify_url" in self.model_fields_set:
            _dict['spotifyUrl'] = None

        # set to None if youtube_url (nullable) is None
        # and model_fields_set contains the field
        if self.youtube_url is None and "youtube_url" in self.model_fields_set:
            _dict['youtubeUrl'] = None

        # set to None if soundcloud_url (nullable) is None
        # and model_fields_set contains the field
        if self.soundcloud_url is None and "soundcloud_url" in self.model_fields_set:
            _dict['soundcloudUrl'] = None

        # set to None if tiktok_url (nullable) is None
        # and model_fields_set contains the field
        if self.tiktok_url is None and "tiktok_url" in self.model_fields_set:
            _dict['tiktokUrl'] = None

        # set to None if instagram_url (nullable) is None
        # and model_fields_set contains the field
        if self.instagram_url is None and "instagram_url" in self.model_fields_set:
            _dict['instagramUrl'] = None

        # set to None if website_url (nullable) is None
        # and model_fields_set contains the field
        if self.website_url is None and "website_url" in self.model_fields_set:
            _dict['websiteUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserCommunityProfileLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spotifyUrl": obj.get("spotifyUrl"),
            "youtubeUrl": obj.get("youtubeUrl"),
            "soundcloudUrl": obj.get("soundcloudUrl"),
            "tiktokUrl": obj.get("tiktokUrl"),
            "instagramUrl": obj.get("instagramUrl"),
            "websiteUrl": obj.get("websiteUrl")
        })
        return _obj



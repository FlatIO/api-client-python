# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

    The version of the OpenAPI document: 2.20.0
    Contact: developers@flat.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from flat_api.models.resource_collaborator import ResourceCollaborator
from flat_api.models.resource_rights import ResourceRights
from flat_api.models.score_comments_counts import ScoreCommentsCounts
from flat_api.models.score_creation_type import ScoreCreationType
from flat_api.models.score_license import ScoreLicense
from flat_api.models.score_likes_counts import ScoreLikesCounts
from flat_api.models.score_plays_counts import ScorePlaysCounts
from flat_api.models.score_privacy import ScorePrivacy
from flat_api.models.score_views_counts import ScoreViewsCounts
from flat_api.models.user_public import UserPublic
from typing import Optional, Set
from typing_extensions import Self

class ScoreDetails(BaseModel):
    """
    ScoreDetails
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier of the score")
    sharing_key: Optional[StrictStr] = Field(default=None, description="The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)", alias="sharingKey")
    title: StrictStr = Field(description="The title of the score")
    privacy: ScorePrivacy
    user: UserPublic
    html_url: StrictStr = Field(description="The url where the score can be viewed in a web browser", alias="htmlUrl")
    subtitle: Optional[StrictStr] = Field(default=None, description="Subtitle of the score")
    lyricist: Optional[StrictStr] = Field(default=None, description="Lyricist of the score")
    arranger: Optional[StrictStr] = Field(default=None, description="Arranger of the score")
    composer: Optional[StrictStr] = Field(default=None, description="Composer of the score")
    description: Optional[StrictStr] = Field(default=None, description="Description of the creation")
    tags: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Tags describing the score")
    creation_type: Optional[ScoreCreationType] = Field(default=None, alias="creationType")
    license: Optional[ScoreLicense] = None
    license_text: Optional[StrictStr] = Field(default=None, description="Additional license text written on the exported/printed score", alias="licenseText")
    duration_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="In seconds, an approximative duration of the score", alias="durationTime")
    number_measures: Optional[StrictInt] = Field(default=None, description="The number of measures in the score", alias="numberMeasures")
    main_tempo_qpm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The main tempo of the score (in QPM)", alias="mainTempoQpm")
    main_key_signature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The main key signature of the score (expressed between -7 and 7).", alias="mainKeySignature")
    rights: Optional[ResourceRights] = None
    collaborators: Optional[List[ResourceCollaborator]] = Field(default=None, description="The list of the collaborators of the score")
    creation_date: Optional[datetime] = Field(default=None, description="The date when the score was created", alias="creationDate")
    modification_date: Optional[datetime] = Field(default=None, description="The date of the last revision of the score", alias="modificationDate")
    publication_date: Optional[datetime] = Field(default=None, description="The date when the score was published on Flat", alias="publicationDate")
    highlighted_date: Optional[datetime] = Field(default=None, description="The date when the score was highlighted (featured) on our community", alias="highlightedDate")
    organization: Optional[StrictStr] = Field(default=None, description="If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`. ")
    parent_score: Optional[StrictStr] = Field(default=None, description="If the score has been forked, the unique identifier of the parent score. ", alias="parentScore")
    instruments: Optional[List[StrictStr]] = Field(default=None, description="An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`. ")
    samples: Optional[List[StrictStr]] = Field(default=None, description="An array of the audio samples identifiers used the different score parts. The format of the strings is `{instrument-group}.{sample-id}`. ")
    google_drive_file_id: Optional[StrictStr] = Field(default=None, description="If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}` ", alias="googleDriveFileId")
    likes: Optional[ScoreLikesCounts] = None
    comments: Optional[ScoreCommentsCounts] = None
    views: Optional[ScoreViewsCounts] = None
    plays: Optional[ScorePlaysCounts] = None
    collections: Optional[List[StrictStr]] = Field(default=None, description="The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.")
    __properties: ClassVar[List[str]] = ["id", "sharingKey", "title", "privacy", "user", "htmlUrl", "subtitle", "lyricist", "arranger", "composer", "description", "tags", "creationType", "license", "licenseText", "durationTime", "numberMeasures", "mainTempoQpm", "mainKeySignature", "rights", "collaborators", "creationDate", "modificationDate", "publicationDate", "highlightedDate", "organization", "parentScore", "instruments", "samples", "googleDriveFileId", "likes", "comments", "views", "plays", "collections"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScoreDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rights
        if self.rights:
            _dict['rights'] = self.rights.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in collaborators (list)
        _items = []
        if self.collaborators:
            for _item in self.collaborators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['collaborators'] = _items
        # override the default output from pydantic by calling `to_dict()` of likes
        if self.likes:
            _dict['likes'] = self.likes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comments
        if self.comments:
            _dict['comments'] = self.comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of views
        if self.views:
            _dict['views'] = self.views.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plays
        if self.plays:
            _dict['plays'] = self.plays.to_dict()
        # set to None if creation_type (nullable) is None
        # and model_fields_set contains the field
        if self.creation_type is None and "creation_type" in self.model_fields_set:
            _dict['creationType'] = None

        # set to None if license (nullable) is None
        # and model_fields_set contains the field
        if self.license is None and "license" in self.model_fields_set:
            _dict['license'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScoreDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "sharingKey": obj.get("sharingKey"),
            "title": obj.get("title"),
            "privacy": obj.get("privacy"),
            "user": UserPublic.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "htmlUrl": obj.get("htmlUrl"),
            "subtitle": obj.get("subtitle"),
            "lyricist": obj.get("lyricist"),
            "arranger": obj.get("arranger"),
            "composer": obj.get("composer"),
            "description": obj.get("description"),
            "tags": obj.get("tags"),
            "creationType": obj.get("creationType"),
            "license": obj.get("license"),
            "licenseText": obj.get("licenseText"),
            "durationTime": obj.get("durationTime"),
            "numberMeasures": obj.get("numberMeasures"),
            "mainTempoQpm": obj.get("mainTempoQpm"),
            "mainKeySignature": obj.get("mainKeySignature"),
            "rights": ResourceRights.from_dict(obj["rights"]) if obj.get("rights") is not None else None,
            "collaborators": [ResourceCollaborator.from_dict(_item) for _item in obj["collaborators"]] if obj.get("collaborators") is not None else None,
            "creationDate": obj.get("creationDate"),
            "modificationDate": obj.get("modificationDate"),
            "publicationDate": obj.get("publicationDate"),
            "highlightedDate": obj.get("highlightedDate"),
            "organization": obj.get("organization"),
            "parentScore": obj.get("parentScore"),
            "instruments": obj.get("instruments"),
            "samples": obj.get("samples"),
            "googleDriveFileId": obj.get("googleDriveFileId"),
            "likes": ScoreLikesCounts.from_dict(obj["likes"]) if obj.get("likes") is not None else None,
            "comments": ScoreCommentsCounts.from_dict(obj["comments"]) if obj.get("comments") is not None else None,
            "views": ScoreViewsCounts.from_dict(obj["views"]) if obj.get("views") is not None else None,
            "plays": ScorePlaysCounts.from_dict(obj["plays"]) if obj.get("plays") is not None else None,
            "collections": obj.get("collections")
        })
        return _obj



# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    OpenAPI spec version: 2.6.0
    Contact: developers@flat.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flat_api.models.score_track_point import ScoreTrackPoint  # noqa: F401,E501
from flat_api.models.score_track_state import ScoreTrackState  # noqa: F401,E501


class ScoreTrackUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'default': 'bool',
        'state': 'ScoreTrackState',
        'synchronization_points': 'list[ScoreTrackPoint]'
    }

    attribute_map = {
        'title': 'title',
        'default': 'default',
        'state': 'state',
        'synchronization_points': 'synchronizationPoints'
    }

    def __init__(self, title=None, default=None, state=None, synchronization_points=None):  # noqa: E501
        """ScoreTrackUpdate - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._default = None
        self._state = None
        self._synchronization_points = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if default is not None:
            self.default = default
        if state is not None:
            self.state = state
        if synchronization_points is not None:
            self.synchronization_points = synchronization_points

    @property
    def title(self):
        """Gets the title of this ScoreTrackUpdate.  # noqa: E501

        Title of the track  # noqa: E501

        :return: The title of this ScoreTrackUpdate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScoreTrackUpdate.

        Title of the track  # noqa: E501

        :param title: The title of this ScoreTrackUpdate.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def default(self):
        """Gets the default of this ScoreTrackUpdate.  # noqa: E501

        True if the track should be used as default audio source  # noqa: E501

        :return: The default of this ScoreTrackUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ScoreTrackUpdate.

        True if the track should be used as default audio source  # noqa: E501

        :param default: The default of this ScoreTrackUpdate.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def state(self):
        """Gets the state of this ScoreTrackUpdate.  # noqa: E501


        :return: The state of this ScoreTrackUpdate.  # noqa: E501
        :rtype: ScoreTrackState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScoreTrackUpdate.


        :param state: The state of this ScoreTrackUpdate.  # noqa: E501
        :type: ScoreTrackState
        """

        self._state = state

    @property
    def synchronization_points(self):
        """Gets the synchronization_points of this ScoreTrackUpdate.  # noqa: E501


        :return: The synchronization_points of this ScoreTrackUpdate.  # noqa: E501
        :rtype: list[ScoreTrackPoint]
        """
        return self._synchronization_points

    @synchronization_points.setter
    def synchronization_points(self, synchronization_points):
        """Sets the synchronization_points of this ScoreTrackUpdate.


        :param synchronization_points: The synchronization_points of this ScoreTrackUpdate.  # noqa: E501
        :type: list[ScoreTrackPoint]
        """

        self._synchronization_points = synchronization_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoreTrackUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    The version of the OpenAPI document: 2.18.0
    Contact: developers@flat.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from flat_api.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from flat_api.exceptions import ApiAttributeError


def lazy_import():
    from flat_api.model.resource_collaborator import ResourceCollaborator
    from flat_api.model.resource_rights import ResourceRights
    from flat_api.model.score_comments_counts import ScoreCommentsCounts
    from flat_api.model.score_creation_type import ScoreCreationType
    from flat_api.model.score_license import ScoreLicense
    from flat_api.model.score_likes_counts import ScoreLikesCounts
    from flat_api.model.score_plays_counts import ScorePlaysCounts
    from flat_api.model.score_privacy import ScorePrivacy
    from flat_api.model.score_views_counts import ScoreViewsCounts
    from flat_api.model.user_public_summary import UserPublicSummary
    globals()['ResourceCollaborator'] = ResourceCollaborator
    globals()['ResourceRights'] = ResourceRights
    globals()['ScoreCommentsCounts'] = ScoreCommentsCounts
    globals()['ScoreCreationType'] = ScoreCreationType
    globals()['ScoreLicense'] = ScoreLicense
    globals()['ScoreLikesCounts'] = ScoreLikesCounts
    globals()['ScorePlaysCounts'] = ScorePlaysCounts
    globals()['ScorePrivacy'] = ScorePrivacy
    globals()['ScoreViewsCounts'] = ScoreViewsCounts
    globals()['UserPublicSummary'] = UserPublicSummary


class ScoreDetails(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'sharing_key': (str,),  # noqa: E501
            'title': (str,),  # noqa: E501
            'privacy': (ScorePrivacy,),  # noqa: E501
            'user': (UserPublicSummary,),  # noqa: E501
            'html_url': (str,),  # noqa: E501
            'subtitle': (str,),  # noqa: E501
            'lyricist': (str,),  # noqa: E501
            'arranger': (str,),  # noqa: E501
            'composer': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'creation_type': (ScoreCreationType,),  # noqa: E501
            'license': (ScoreLicense,),  # noqa: E501
            'license_text': (str,),  # noqa: E501
            'duration_time': (float,),  # noqa: E501
            'number_measures': (int,),  # noqa: E501
            'main_tempo_qpm': (float,),  # noqa: E501
            'rights': (ResourceRights,),  # noqa: E501
            'collaborators': ([ResourceCollaborator],),  # noqa: E501
            'creation_date': (datetime,),  # noqa: E501
            'modification_date': (datetime,),  # noqa: E501
            'publication_date': (datetime,),  # noqa: E501
            'organization': (str,),  # noqa: E501
            'parent_score': (str,),  # noqa: E501
            'instruments': ([str],),  # noqa: E501
            'samples': ([str],),  # noqa: E501
            'google_drive_file_id': (str,),  # noqa: E501
            'likes': (ScoreLikesCounts,),  # noqa: E501
            'comments': (ScoreCommentsCounts,),  # noqa: E501
            'views': (ScoreViewsCounts,),  # noqa: E501
            'plays': (ScorePlaysCounts,),  # noqa: E501
            'collections': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'sharing_key': 'sharingKey',  # noqa: E501
        'title': 'title',  # noqa: E501
        'privacy': 'privacy',  # noqa: E501
        'user': 'user',  # noqa: E501
        'html_url': 'htmlUrl',  # noqa: E501
        'subtitle': 'subtitle',  # noqa: E501
        'lyricist': 'lyricist',  # noqa: E501
        'arranger': 'arranger',  # noqa: E501
        'composer': 'composer',  # noqa: E501
        'description': 'description',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'creation_type': 'creationType',  # noqa: E501
        'license': 'license',  # noqa: E501
        'license_text': 'licenseText',  # noqa: E501
        'duration_time': 'durationTime',  # noqa: E501
        'number_measures': 'numberMeasures',  # noqa: E501
        'main_tempo_qpm': 'mainTempoQpm',  # noqa: E501
        'rights': 'rights',  # noqa: E501
        'collaborators': 'collaborators',  # noqa: E501
        'creation_date': 'creationDate',  # noqa: E501
        'modification_date': 'modificationDate',  # noqa: E501
        'publication_date': 'publicationDate',  # noqa: E501
        'organization': 'organization',  # noqa: E501
        'parent_score': 'parentScore',  # noqa: E501
        'instruments': 'instruments',  # noqa: E501
        'samples': 'samples',  # noqa: E501
        'google_drive_file_id': 'googleDriveFileId',  # noqa: E501
        'likes': 'likes',  # noqa: E501
        'comments': 'comments',  # noqa: E501
        'views': 'views',  # noqa: E501
        'plays': 'plays',  # noqa: E501
        'collections': 'collections',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ScoreDetails - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The unique identifier of the score. [optional]  # noqa: E501
            sharing_key (str): The private sharing key of the score (available when the `privacy` mode is set to `privateLink`). [optional]  # noqa: E501
            title (str): The title of the score. [optional]  # noqa: E501
            privacy (ScorePrivacy): [optional]  # noqa: E501
            user (UserPublicSummary): [optional]  # noqa: E501
            html_url (str): The url where the score can be viewed in a web browser. [optional]  # noqa: E501
            subtitle (str): Subtitle of the score. [optional]  # noqa: E501
            lyricist (str): Lyricist of the score. [optional]  # noqa: E501
            arranger (str): Arranger of the score. [optional]  # noqa: E501
            composer (str): Composer of the score. [optional]  # noqa: E501
            description (str): Description of the creation. [optional]  # noqa: E501
            tags ([str]): Tags describing the score. [optional]  # noqa: E501
            creation_type (ScoreCreationType): [optional]  # noqa: E501
            license (ScoreLicense): [optional]  # noqa: E501
            license_text (str): Additional license text written on the exported/printed score. [optional]  # noqa: E501
            duration_time (float): In seconds, an approximative duration of the score. [optional]  # noqa: E501
            number_measures (int): The number of measures in the score. [optional]  # noqa: E501
            main_tempo_qpm (float): The main tempo of the score (in QPM). [optional]  # noqa: E501
            rights (ResourceRights): [optional]  # noqa: E501
            collaborators ([ResourceCollaborator]): The list of the collaborators of the score. [optional]  # noqa: E501
            creation_date (datetime): The date when the score was created. [optional]  # noqa: E501
            modification_date (datetime): The date of the last revision of the score. [optional]  # noqa: E501
            publication_date (datetime): The date when the score was published on Flat. [optional]  # noqa: E501
            organization (str): If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`. . [optional]  # noqa: E501
            parent_score (str): If the score has been forked, the unique identifier of the parent score. . [optional]  # noqa: E501
            instruments ([str]): An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`. . [optional]  # noqa: E501
            samples ([str]): An array of the audio samples identifiers used the different score parts. The format of the strings is `{instrument-group}.{sample-id}`. . [optional]  # noqa: E501
            google_drive_file_id (str): If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}` . [optional]  # noqa: E501
            likes (ScoreLikesCounts): [optional]  # noqa: E501
            comments (ScoreCommentsCounts): [optional]  # noqa: E501
            views (ScoreViewsCounts): [optional]  # noqa: E501
            plays (ScorePlaysCounts): [optional]  # noqa: E501
            collections ([str]): The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ScoreDetails - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The unique identifier of the score. [optional]  # noqa: E501
            sharing_key (str): The private sharing key of the score (available when the `privacy` mode is set to `privateLink`). [optional]  # noqa: E501
            title (str): The title of the score. [optional]  # noqa: E501
            privacy (ScorePrivacy): [optional]  # noqa: E501
            user (UserPublicSummary): [optional]  # noqa: E501
            html_url (str): The url where the score can be viewed in a web browser. [optional]  # noqa: E501
            subtitle (str): Subtitle of the score. [optional]  # noqa: E501
            lyricist (str): Lyricist of the score. [optional]  # noqa: E501
            arranger (str): Arranger of the score. [optional]  # noqa: E501
            composer (str): Composer of the score. [optional]  # noqa: E501
            description (str): Description of the creation. [optional]  # noqa: E501
            tags ([str]): Tags describing the score. [optional]  # noqa: E501
            creation_type (ScoreCreationType): [optional]  # noqa: E501
            license (ScoreLicense): [optional]  # noqa: E501
            license_text (str): Additional license text written on the exported/printed score. [optional]  # noqa: E501
            duration_time (float): In seconds, an approximative duration of the score. [optional]  # noqa: E501
            number_measures (int): The number of measures in the score. [optional]  # noqa: E501
            main_tempo_qpm (float): The main tempo of the score (in QPM). [optional]  # noqa: E501
            rights (ResourceRights): [optional]  # noqa: E501
            collaborators ([ResourceCollaborator]): The list of the collaborators of the score. [optional]  # noqa: E501
            creation_date (datetime): The date when the score was created. [optional]  # noqa: E501
            modification_date (datetime): The date of the last revision of the score. [optional]  # noqa: E501
            publication_date (datetime): The date when the score was published on Flat. [optional]  # noqa: E501
            organization (str): If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`. . [optional]  # noqa: E501
            parent_score (str): If the score has been forked, the unique identifier of the parent score. . [optional]  # noqa: E501
            instruments ([str]): An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`. . [optional]  # noqa: E501
            samples ([str]): An array of the audio samples identifiers used the different score parts. The format of the strings is `{instrument-group}.{sample-id}`. . [optional]  # noqa: E501
            google_drive_file_id (str): If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}` . [optional]  # noqa: E501
            likes (ScoreLikesCounts): [optional]  # noqa: E501
            comments (ScoreCommentsCounts): [optional]  # noqa: E501
            views (ScoreViewsCounts): [optional]  # noqa: E501
            plays (ScorePlaysCounts): [optional]  # noqa: E501
            collections ([str]): The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

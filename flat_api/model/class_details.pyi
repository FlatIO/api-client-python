# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    The version of the OpenAPI document: 2.18.0
    Contact: developers@flat.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flat_api import schemas  # noqa: F401


class ClassDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A classroom
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def state() -> typing.Type['ClassState']:
                return ClassState
            name = schemas.StrSchema
            section = schemas.StrSchema
            description = schemas.StrSchema
            organization = schemas.StrSchema
            owner = schemas.StrSchema
            creationDate = schemas.DateTimeSchema
            enrollmentCode = schemas.StrSchema
            theme = schemas.StrSchema
            assignmentsCount = schemas.NumberSchema
        
            @staticmethod
            def studentsGroup() -> typing.Type['GroupDetails']:
                return GroupDetails
        
            @staticmethod
            def teachersGroup() -> typing.Type['GroupDetails']:
                return GroupDetails
            
            
            class issues(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class sync(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            id = schemas.StrSchema
                                            email = schemas.StrSchema
                                            
                                            
                                            class reason(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def OTHER_ORGNANIZATION(cls):
                                                    return cls("otherOrgnanization")
                                                
                                                @schemas.classproperty
                                                def PERSONAL_SUBSCRIPTION(cls):
                                                    return cls("personalSubscription")
                                            __annotations__ = {
                                                "id": id,
                                                "email": email,
                                                "reason": reason,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "email", "reason", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "email", "reason", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                                        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            id=id,
                                            email=email,
                                            reason=reason,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'sync':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "sync": sync,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sync"]) -> MetaOapg.properties.sync: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["sync", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sync"]) -> typing.Union[MetaOapg.properties.sync, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sync", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    sync: typing.Union[MetaOapg.properties.sync, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'issues':
                    return super().__new__(
                        cls,
                        *_args,
                        sync=sync,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class googleClassroom(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        alternateLink = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                            "alternateLink": alternateLink,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["alternateLink"]) -> MetaOapg.properties.alternateLink: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "alternateLink", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["alternateLink"]) -> typing.Union[MetaOapg.properties.alternateLink, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "alternateLink", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    alternateLink: typing.Union[MetaOapg.properties.alternateLink, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'googleClassroom':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        alternateLink=alternateLink,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class googleDrive(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        teacherFolderId = schemas.StrSchema
                        teacherFolderAlternateLink = schemas.StrSchema
                        __annotations__ = {
                            "teacherFolderId": teacherFolderId,
                            "teacherFolderAlternateLink": teacherFolderAlternateLink,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["teacherFolderId"]) -> MetaOapg.properties.teacherFolderId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["teacherFolderAlternateLink"]) -> MetaOapg.properties.teacherFolderAlternateLink: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["teacherFolderId", "teacherFolderAlternateLink", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["teacherFolderId"]) -> typing.Union[MetaOapg.properties.teacherFolderId, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["teacherFolderAlternateLink"]) -> typing.Union[MetaOapg.properties.teacherFolderAlternateLink, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["teacherFolderId", "teacherFolderAlternateLink", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    teacherFolderId: typing.Union[MetaOapg.properties.teacherFolderId, str, schemas.Unset] = schemas.unset,
                    teacherFolderAlternateLink: typing.Union[MetaOapg.properties.teacherFolderAlternateLink, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'googleDrive':
                    return super().__new__(
                        cls,
                        *_args,
                        teacherFolderId=teacherFolderId,
                        teacherFolderAlternateLink=teacherFolderAlternateLink,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class microsoftGraph(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'microsoftGraph':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class lti(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        contextId = schemas.StrSchema
                        contextTitle = schemas.StrSchema
                        contextLabel = schemas.StrSchema
                        __annotations__ = {
                            "contextId": contextId,
                            "contextTitle": contextTitle,
                            "contextLabel": contextLabel,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["contextId"]) -> MetaOapg.properties.contextId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["contextTitle"]) -> MetaOapg.properties.contextTitle: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["contextLabel"]) -> MetaOapg.properties.contextLabel: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["contextId", "contextTitle", "contextLabel", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["contextId"]) -> typing.Union[MetaOapg.properties.contextId, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["contextTitle"]) -> typing.Union[MetaOapg.properties.contextTitle, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["contextLabel"]) -> typing.Union[MetaOapg.properties.contextLabel, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contextId", "contextTitle", "contextLabel", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    contextId: typing.Union[MetaOapg.properties.contextId, str, schemas.Unset] = schemas.unset,
                    contextTitle: typing.Union[MetaOapg.properties.contextTitle, str, schemas.Unset] = schemas.unset,
                    contextLabel: typing.Union[MetaOapg.properties.contextLabel, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'lti':
                    return super().__new__(
                        cls,
                        *_args,
                        contextId=contextId,
                        contextTitle=contextTitle,
                        contextLabel=contextLabel,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class canvas(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        domain = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                            "domain": domain,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "domain", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "domain", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'canvas':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        domain=domain,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class mfc(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        alternateLink = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                            "alternateLink": alternateLink,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["alternateLink"]) -> MetaOapg.properties.alternateLink: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "alternateLink", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["alternateLink"]) -> typing.Union[MetaOapg.properties.alternateLink, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "alternateLink", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    alternateLink: typing.Union[MetaOapg.properties.alternateLink, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mfc':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        alternateLink=alternateLink,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class clever(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        creationDate = schemas.DateTimeSchema
                        modificationDate = schemas.DateTimeSchema
                        
                        
                        class subject(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def ENGLISH_LANGUAGE_ARTS(cls):
                                return cls("english/language arts")
                            
                            @schemas.classproperty
                            def MATH(cls):
                                return cls("math")
                            
                            @schemas.classproperty
                            def SCIENCE(cls):
                                return cls("science")
                            
                            @schemas.classproperty
                            def SOCIAL_STUDIES(cls):
                                return cls("social studies")
                            
                            @schemas.classproperty
                            def LANGUAGE(cls):
                                return cls("language")
                            
                            @schemas.classproperty
                            def HOMEROOM_ADVISORY(cls):
                                return cls("homeroom/advisory")
                            
                            @schemas.classproperty
                            def INTERVENTIONS_ONLINE_LEARNING(cls):
                                return cls("interventions/online learning")
                            
                            @schemas.classproperty
                            def TECHNOLOGY_AND_ENGINEERING(cls):
                                return cls("technology and engineering")
                            
                            @schemas.classproperty
                            def PE_AND_HEALTH(cls):
                                return cls("PE and health")
                            
                            @schemas.classproperty
                            def ARTS_AND_MUSIC(cls):
                                return cls("arts and music")
                            
                            @schemas.classproperty
                            def OTHER(cls):
                                return cls("other")
                        termName = schemas.StrSchema
                        termStartDate = schemas.DateTimeSchema
                        termEndDate = schemas.DateTimeSchema
                        __annotations__ = {
                            "id": id,
                            "creationDate": creationDate,
                            "modificationDate": modificationDate,
                            "subject": subject,
                            "termName": termName,
                            "termStartDate": termStartDate,
                            "termEndDate": termEndDate,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["modificationDate"]) -> MetaOapg.properties.modificationDate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["termName"]) -> MetaOapg.properties.termName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["termStartDate"]) -> MetaOapg.properties.termStartDate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["termEndDate"]) -> MetaOapg.properties.termEndDate: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "creationDate", "modificationDate", "subject", "termName", "termStartDate", "termEndDate", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["modificationDate"]) -> typing.Union[MetaOapg.properties.modificationDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["termName"]) -> typing.Union[MetaOapg.properties.termName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["termStartDate"]) -> typing.Union[MetaOapg.properties.termStartDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["termEndDate"]) -> typing.Union[MetaOapg.properties.termEndDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "creationDate", "modificationDate", "subject", "termName", "termStartDate", "termEndDate", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
                    modificationDate: typing.Union[MetaOapg.properties.modificationDate, str, datetime, schemas.Unset] = schemas.unset,
                    subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
                    termName: typing.Union[MetaOapg.properties.termName, str, schemas.Unset] = schemas.unset,
                    termStartDate: typing.Union[MetaOapg.properties.termStartDate, str, datetime, schemas.Unset] = schemas.unset,
                    termEndDate: typing.Union[MetaOapg.properties.termEndDate, str, datetime, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'clever':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        creationDate=creationDate,
                        modificationDate=modificationDate,
                        subject=subject,
                        termName=termName,
                        termStartDate=termStartDate,
                        termEndDate=termEndDate,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def level() -> typing.Type['ClassGradeLevel']:
                return ClassGradeLevel
        
            @staticmethod
            def skillsFocused() -> typing.Type['EduSkillsFocused']:
                return EduSkillsFocused
            
            
            class size(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'size':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "state": state,
                "name": name,
                "section": section,
                "description": description,
                "organization": organization,
                "owner": owner,
                "creationDate": creationDate,
                "enrollmentCode": enrollmentCode,
                "theme": theme,
                "assignmentsCount": assignmentsCount,
                "studentsGroup": studentsGroup,
                "teachersGroup": teachersGroup,
                "issues": issues,
                "googleClassroom": googleClassroom,
                "googleDrive": googleDrive,
                "microsoftGraph": microsoftGraph,
                "lti": lti,
                "canvas": canvas,
                "mfc": mfc,
                "clever": clever,
                "level": level,
                "skillsFocused": skillsFocused,
                "size": size,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'ClassState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrollmentCode"]) -> MetaOapg.properties.enrollmentCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignmentsCount"]) -> MetaOapg.properties.assignmentsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["studentsGroup"]) -> 'GroupDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teachersGroup"]) -> 'GroupDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issues"]) -> MetaOapg.properties.issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["googleClassroom"]) -> MetaOapg.properties.googleClassroom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["googleDrive"]) -> MetaOapg.properties.googleDrive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["microsoftGraph"]) -> MetaOapg.properties.microsoftGraph: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lti"]) -> MetaOapg.properties.lti: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canvas"]) -> MetaOapg.properties.canvas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mfc"]) -> MetaOapg.properties.mfc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clever"]) -> MetaOapg.properties.clever: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> 'ClassGradeLevel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillsFocused"]) -> 'EduSkillsFocused': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "state", "name", "section", "description", "organization", "owner", "creationDate", "enrollmentCode", "theme", "assignmentsCount", "studentsGroup", "teachersGroup", "issues", "googleClassroom", "googleDrive", "microsoftGraph", "lti", "canvas", "mfc", "clever", "level", "skillsFocused", "size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['ClassState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> typing.Union[MetaOapg.properties.section, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union[MetaOapg.properties.organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrollmentCode"]) -> typing.Union[MetaOapg.properties.enrollmentCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["theme"]) -> typing.Union[MetaOapg.properties.theme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignmentsCount"]) -> typing.Union[MetaOapg.properties.assignmentsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["studentsGroup"]) -> typing.Union['GroupDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teachersGroup"]) -> typing.Union['GroupDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issues"]) -> typing.Union[MetaOapg.properties.issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["googleClassroom"]) -> typing.Union[MetaOapg.properties.googleClassroom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["googleDrive"]) -> typing.Union[MetaOapg.properties.googleDrive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["microsoftGraph"]) -> typing.Union[MetaOapg.properties.microsoftGraph, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lti"]) -> typing.Union[MetaOapg.properties.lti, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canvas"]) -> typing.Union[MetaOapg.properties.canvas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mfc"]) -> typing.Union[MetaOapg.properties.mfc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clever"]) -> typing.Union[MetaOapg.properties.clever, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union['ClassGradeLevel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillsFocused"]) -> typing.Union['EduSkillsFocused', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "state", "name", "section", "description", "organization", "owner", "creationDate", "enrollmentCode", "theme", "assignmentsCount", "studentsGroup", "teachersGroup", "issues", "googleClassroom", "googleDrive", "microsoftGraph", "lti", "canvas", "mfc", "clever", "level", "skillsFocused", "size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        state: typing.Union['ClassState', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        section: typing.Union[MetaOapg.properties.section, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        organization: typing.Union[MetaOapg.properties.organization, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
        enrollmentCode: typing.Union[MetaOapg.properties.enrollmentCode, str, schemas.Unset] = schemas.unset,
        theme: typing.Union[MetaOapg.properties.theme, str, schemas.Unset] = schemas.unset,
        assignmentsCount: typing.Union[MetaOapg.properties.assignmentsCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        studentsGroup: typing.Union['GroupDetails', schemas.Unset] = schemas.unset,
        teachersGroup: typing.Union['GroupDetails', schemas.Unset] = schemas.unset,
        issues: typing.Union[MetaOapg.properties.issues, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        googleClassroom: typing.Union[MetaOapg.properties.googleClassroom, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        googleDrive: typing.Union[MetaOapg.properties.googleDrive, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        microsoftGraph: typing.Union[MetaOapg.properties.microsoftGraph, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        lti: typing.Union[MetaOapg.properties.lti, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        canvas: typing.Union[MetaOapg.properties.canvas, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        mfc: typing.Union[MetaOapg.properties.mfc, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        clever: typing.Union[MetaOapg.properties.clever, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        level: typing.Union['ClassGradeLevel', schemas.Unset] = schemas.unset,
        skillsFocused: typing.Union['EduSkillsFocused', schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClassDetails':
        return super().__new__(
            cls,
            *_args,
            id=id,
            state=state,
            name=name,
            section=section,
            description=description,
            organization=organization,
            owner=owner,
            creationDate=creationDate,
            enrollmentCode=enrollmentCode,
            theme=theme,
            assignmentsCount=assignmentsCount,
            studentsGroup=studentsGroup,
            teachersGroup=teachersGroup,
            issues=issues,
            googleClassroom=googleClassroom,
            googleDrive=googleDrive,
            microsoftGraph=microsoftGraph,
            lti=lti,
            canvas=canvas,
            mfc=mfc,
            clever=clever,
            level=level,
            skillsFocused=skillsFocused,
            size=size,
            _configuration=_configuration,
            **kwargs,
        )

from flat_api.model.class_grade_level import ClassGradeLevel
from flat_api.model.class_state import ClassState
from flat_api.model.edu_skills_focused import EduSkillsFocused
from flat_api.model.group_details import GroupDetails

# coding: utf-8

"""
    Flat API

    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)   # noqa: E501

    The version of the OpenAPI document: 2.18.0
    Contact: developers@flat.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flat_api import schemas  # noqa: F401


class AssignmentSubmission(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Assignment Submission
    """


    class MetaOapg:
        required = {
            "creator",
            "attachments",
            "assignment",
            "classroom",
            "id",
            "state",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def state() -> typing.Type['AssignmentSubmissionState']:
                return AssignmentSubmissionState
            classroom = schemas.StrSchema
            assignment = schemas.StrSchema
            creator = schemas.StrSchema
            
            
            class attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MediaAttachment']:
                        return MediaAttachment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MediaAttachment'], typing.List['MediaAttachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attachments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MediaAttachment':
                    return super().__getitem__(i)
            creationDate = schemas.StrSchema
            submissionDate = schemas.StrSchema
            returnDate = schemas.StrSchema
            returnCreator = schemas.StrSchema
            
            
            class grade(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grade':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class draftGrade(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'draftGrade':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            maxPoints = schemas.NumberSchema
            
            
            class exercisesIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exercisesIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def googleClassroom() -> typing.Type['GoogleClassroomSubmission']:
                return GoogleClassroomSubmission
        
            @staticmethod
            def microsoftGraph() -> typing.Type['MicrosoftGraphSubmission']:
                return MicrosoftGraphSubmission
            __annotations__ = {
                "id": id,
                "state": state,
                "classroom": classroom,
                "assignment": assignment,
                "creator": creator,
                "attachments": attachments,
                "creationDate": creationDate,
                "submissionDate": submissionDate,
                "returnDate": returnDate,
                "returnCreator": returnCreator,
                "grade": grade,
                "draftGrade": draftGrade,
                "maxPoints": maxPoints,
                "exercisesIds": exercisesIds,
                "googleClassroom": googleClassroom,
                "microsoftGraph": microsoftGraph,
            }
    
    creator: MetaOapg.properties.creator
    attachments: MetaOapg.properties.attachments
    assignment: MetaOapg.properties.assignment
    classroom: MetaOapg.properties.classroom
    id: MetaOapg.properties.id
    state: 'AssignmentSubmissionState'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'AssignmentSubmissionState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classroom"]) -> MetaOapg.properties.classroom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignment"]) -> MetaOapg.properties.assignment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submissionDate"]) -> MetaOapg.properties.submissionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["returnDate"]) -> MetaOapg.properties.returnDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["returnCreator"]) -> MetaOapg.properties.returnCreator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grade"]) -> MetaOapg.properties.grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draftGrade"]) -> MetaOapg.properties.draftGrade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxPoints"]) -> MetaOapg.properties.maxPoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exercisesIds"]) -> MetaOapg.properties.exercisesIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["googleClassroom"]) -> 'GoogleClassroomSubmission': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["microsoftGraph"]) -> 'MicrosoftGraphSubmission': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "state", "classroom", "assignment", "creator", "attachments", "creationDate", "submissionDate", "returnDate", "returnCreator", "grade", "draftGrade", "maxPoints", "exercisesIds", "googleClassroom", "microsoftGraph", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'AssignmentSubmissionState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classroom"]) -> MetaOapg.properties.classroom: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignment"]) -> MetaOapg.properties.assignment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submissionDate"]) -> typing.Union[MetaOapg.properties.submissionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["returnDate"]) -> typing.Union[MetaOapg.properties.returnDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["returnCreator"]) -> typing.Union[MetaOapg.properties.returnCreator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grade"]) -> typing.Union[MetaOapg.properties.grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draftGrade"]) -> typing.Union[MetaOapg.properties.draftGrade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxPoints"]) -> typing.Union[MetaOapg.properties.maxPoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exercisesIds"]) -> typing.Union[MetaOapg.properties.exercisesIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["googleClassroom"]) -> typing.Union['GoogleClassroomSubmission', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["microsoftGraph"]) -> typing.Union['MicrosoftGraphSubmission', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "state", "classroom", "assignment", "creator", "attachments", "creationDate", "submissionDate", "returnDate", "returnCreator", "grade", "draftGrade", "maxPoints", "exercisesIds", "googleClassroom", "microsoftGraph", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        creator: typing.Union[MetaOapg.properties.creator, str, ],
        attachments: typing.Union[MetaOapg.properties.attachments, list, tuple, ],
        assignment: typing.Union[MetaOapg.properties.assignment, str, ],
        classroom: typing.Union[MetaOapg.properties.classroom, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        state: 'AssignmentSubmissionState',
        creationDate: typing.Union[MetaOapg.properties.creationDate, str, schemas.Unset] = schemas.unset,
        submissionDate: typing.Union[MetaOapg.properties.submissionDate, str, schemas.Unset] = schemas.unset,
        returnDate: typing.Union[MetaOapg.properties.returnDate, str, schemas.Unset] = schemas.unset,
        returnCreator: typing.Union[MetaOapg.properties.returnCreator, str, schemas.Unset] = schemas.unset,
        grade: typing.Union[MetaOapg.properties.grade, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        draftGrade: typing.Union[MetaOapg.properties.draftGrade, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxPoints: typing.Union[MetaOapg.properties.maxPoints, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exercisesIds: typing.Union[MetaOapg.properties.exercisesIds, list, tuple, None, schemas.Unset] = schemas.unset,
        googleClassroom: typing.Union['GoogleClassroomSubmission', schemas.Unset] = schemas.unset,
        microsoftGraph: typing.Union['MicrosoftGraphSubmission', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssignmentSubmission':
        return super().__new__(
            cls,
            *_args,
            creator=creator,
            attachments=attachments,
            assignment=assignment,
            classroom=classroom,
            id=id,
            state=state,
            creationDate=creationDate,
            submissionDate=submissionDate,
            returnDate=returnDate,
            returnCreator=returnCreator,
            grade=grade,
            draftGrade=draftGrade,
            maxPoints=maxPoints,
            exercisesIds=exercisesIds,
            googleClassroom=googleClassroom,
            microsoftGraph=microsoftGraph,
            _configuration=_configuration,
            **kwargs,
        )

from flat_api.model.assignment_submission_state import AssignmentSubmissionState
from flat_api.model.google_classroom_submission import GoogleClassroomSubmission
from flat_api.model.media_attachment import MediaAttachment
from flat_api.model.microsoft_graph_submission import MicrosoftGraphSubmission
